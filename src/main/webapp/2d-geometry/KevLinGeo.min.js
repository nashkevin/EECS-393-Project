// Simplified and minified from http://www.kevlindev.com/geometry/index.htm
function Intersection(a){arguments.length>0&&this.init(a)}Intersection.prototype.init=function(a){this.status=a,this.points=new Array},Intersection.prototype.appendPoint=function(a){this.points.push(a)},Intersection.prototype.appendPoints=function(a){this.points=this.points.concat(a)},Intersection.intersectShapes=function(a,b){var e,c=a.getIntersectionParams(),d=b.getIntersectionParams();if(null!=c&&null!=d)if("Path"==c.name)e=Intersection.intersectPathShape(a,b);else if("Path"==d.name)e=Intersection.intersectPathShape(b,a);else{var f,g;if(c.name<d.name?(f="intersect"+c.name+d.name,g=c.params.concat(d.params)):(f="intersect"+d.name+c.name,g=d.params.concat(c.params)),!(f in Intersection))throw new Error("Intersection not available: "+f);e=Intersection[f].apply(null,g)}else e=new Intersection("No Intersection");return e},Intersection.intersectPathShape=function(a,b){return a.intersectShape(b)},Intersection.intersectCircleLine=function(a,b,c,d){var e,f=(d.x-c.x)*(d.x-c.x)+(d.y-c.y)*(d.y-c.y),g=2*((d.x-c.x)*(c.x-a.x)+(d.y-c.y)*(c.y-a.y)),h=a.x*a.x+a.y*a.y+c.x*c.x+c.y*c.y-2*(a.x*c.x+a.y*c.y)-b*b,i=g*g-4*f*h;if(i<0)e=new Intersection("Outside");else if(0==i)e=new Intersection("Tangent");else{var j=Math.sqrt(i),k=(-g+j)/(2*f),l=(-g-j)/(2*f);(k<0||k>1)&&(l<0||l>1)?e=new Intersection(k<0&&l<0||k>1&&l>1?"Outside":"Inside"):(e=new Intersection("Intersection"),0<=k&&k<=1&&e.points.push(c.lerp(d,k)),0<=l&&l<=1&&e.points.push(c.lerp(d,l)))}return e},Intersection.intersectCircleRectangle=function(a,b,c,d){var e=c.min(d),f=c.max(d),g=new Point2D(f.x,e.y),h=new Point2D(e.x,f.y),i=Intersection.intersectCircleLine(a,b,e,g),j=Intersection.intersectCircleLine(a,b,g,f),k=Intersection.intersectCircleLine(a,b,f,h),l=Intersection.intersectCircleLine(a,b,h,e),m=new Intersection("No Intersection");return m.appendPoints(i.points),m.appendPoints(j.points),m.appendPoints(k.points),m.appendPoints(l.points),m.points.length>0?m.status="Intersection":m.status=i.status,m};function Point2D(a,b){arguments.length>0&&(this.x=a,this.y=b)}Point2D.prototype.clone=function(){return new Point2D(this.x,this.y)},Point2D.prototype.add=function(a){return new Point2D(this.x+a.x,this.y+a.y)},Point2D.prototype.addEquals=function(a){return this.x+=a.x,this.y+=a.y,this},Point2D.prototype.offset=function(a,b){var c=0;if(!(b.x<=this.x||this.x+a.x<=0)){var e,f,d=b.x*a.y-a.x*b.y;d>0?this.x<0?(e=this.x*a.y,f=e/a.x-this.y):this.x>0?(e=this.x*b.y,f=e/b.x-this.y):f=-this.y:b.x<this.x+a.x?(e=(b.x-this.x)*a.y,f=b.y-(this.y+e/a.x)):b.x>this.x+a.x?(e=(a.x+this.x)*b.y,f=e/b.x-(this.y+a.y)):f=b.y-(this.y+a.y),f>0&&(c=f)}return c},Point2D.prototype.rmoveto=function(a,b){this.x+=a,this.y+=b},Point2D.prototype.scalarAdd=function(a){return new Point2D(this.x+a,this.y+a)},Point2D.prototype.scalarAddEquals=function(a){return this.x+=a,this.y+=a,this},Point2D.prototype.subtract=function(a){return new Point2D(this.x-a.x,this.y-a.y)},Point2D.prototype.subtractEquals=function(a){return this.x-=a.x,this.y-=a.y,this},Point2D.prototype.scalarSubtract=function(a){return new Point2D(this.x-a,this.y-a)},Point2D.prototype.scalarSubtractEquals=function(a){return this.x-=a,this.y-=a,this},Point2D.prototype.multiply=function(a){return new Point2D(this.x*a,this.y*a)},Point2D.prototype.multiplyEquals=function(a){return this.x*=a,this.y*=a,this},Point2D.prototype.divide=function(a){return new Point2D(this.x/a,this.y/a)},Point2D.prototype.divideEquals=function(a){return this.x/=a,this.y/=a,this},Point2D.prototype.compare=function(a){return this.x-a.x||this.y-a.y},Point2D.prototype.eq=function(a){return this.x==a.x&&this.y==a.y},Point2D.prototype.lt=function(a){return this.x<a.x&&this.y<a.y},Point2D.prototype.lte=function(a){return this.x<=a.x&&this.y<=a.y},Point2D.prototype.gt=function(a){return this.x>a.x&&this.y>a.y},Point2D.prototype.gte=function(a){return this.x>=a.x&&this.y>=a.y},Point2D.prototype.lerp=function(a,b){return new Point2D(this.x+(a.x-this.x)*b,this.y+(a.y-this.y)*b)},Point2D.prototype.distanceFrom=function(a){var b=this.x-a.x,c=this.y-a.y;return Math.sqrt(b*b+c*c)},Point2D.prototype.min=function(a){return new Point2D(Math.min(this.x,a.x),Math.min(this.y,a.y))},Point2D.prototype.max=function(a){return new Point2D(Math.max(this.x,a.x),Math.max(this.y,a.y))},Point2D.prototype.toString=function(){return this.x+","+this.y},Point2D.prototype.setXY=function(a,b){this.x=a,this.y=b},Point2D.prototype.setFromPoint=function(a){this.x=a.x,this.y=a.y},Point2D.prototype.swap=function(a){var b=this.x,c=this.y;this.x=a.x,this.y=a.y,a.x=b,a.y=c};
